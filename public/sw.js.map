{"version":3,"file":"/sw.js","mappings":"MAOA,IAGMA,EAAc,qBACdC,EAAW,kBACXC,EAAU,iBACVC,EAAc,qBACdC,EAAe,sBAGfC,EAAa,cACbC,EAAqB,uBACrBC,EAAoB,sBAItBC,EAAqB,CACrBR,EACAC,EACAC,EACAC,EACAC,GAGAK,EAAsB,CACtBJ,EACAC,EACAC,GAKEG,EAAgB,CAClB,eACA,gCACA,0BACA,0BACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,4BACA,qCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,4DACA,4DACA,8DAGEC,EAAa,CACf,eACA,mCACA,0BACA,yBACA,sBACA,yBACA,yBACA,yBACA,mCACA,gCACA,mCACA,iCACA,2CACA,kCAGEC,EAAY,CACd,8BACA,8BACA,8BACA,+BACA,iCACA,+BACA,+BACA,cAGEC,EAAgB,CAClB,iCAGEC,EAAiB,CACnB,0CACA,8CACA,6CACA,iDACA,4DACA,6DACA,8FACA,qDACA,iDACA,gDACA,oDACA,qEACA,oEACA,2CACA,+CACA,4CACA,gDACA,qCACA,uCACA,0CACA,8CACA,4CACA,4CACA,4CACA,6CACA,wCACA,4CACA,6CACA,kDACA,yCACA,6CACA,8CACA,0CACA,oCACA,wCACA,uCACA,wCAIEC,EAAe,CACjB,IACA,OACA,kBACA,eACA,SACA,WACA,kBACA,kBACA,gBACA,kBACA,gBACA,kBAGEC,EAAsB,CACxB,6BAKJC,KAAKC,iBAAiB,WAAW,SAACC,GAE9BA,EAAMC,UACFC,OAAOC,KAAKtB,GAAauB,MAAK,SAAAC,GAAUA,EAAMC,OAAOf,MACrDW,OAAOC,KAAKrB,GAAUsB,MAAK,SAAAC,GAAUA,EAAMC,OAAOd,MAClDU,OAAOC,KAAKpB,GAASqB,MAAK,SAAAC,GAAUA,EAAMC,OAAOb,MACjDS,OAAOC,KAAKnB,GAAaoB,MAAK,SAAAC,GAAUA,EAAMC,OAAOZ,MACrDQ,OAAOC,KAAKlB,GAAcmB,MAAK,SAAAC,GAAUA,EAAMC,OAAOX,MACtDO,OAAOC,KAAKf,GAAmBgB,MAAK,SAAAC,GAAUA,EAAMC,OAAOT,MAC3DK,OAAOC,KAAKjB,GAAYkB,MAAK,SAAAC,GAAUA,EAAMC,OAAOV,UAM5DE,KAAKC,iBAAiB,YAAY,SAACC,GAI/BA,EAAMC,UACFC,OAAOK,OAAOH,MAAK,SAAAG,GACf,OAAOC,QAAQC,IAAIF,EAEdG,QAAO,SAAAC,GAAG,OAAwC,GAApCtB,EAAmBuB,SAASD,IAAsD,GAArCrB,EAAoBsB,SAASD,MACxFE,KAAI,SAAAF,GAAG,OAAIT,OAAM,OAAQS,cAQ1Cb,KAAKC,iBAAiB,SAAS,SAACC,GAE5BA,EAAMc,YACFZ,OAAOa,MAAMf,EAAMgB,SAASZ,MAAK,SAAAa,GAG7B,IACIC,EAAM,IADKlB,EAAMgB,QAAQG,IAAIC,MAAMtB,KAAKuB,aAAaC,OAClC,GAGvB,OAAI1B,EAAagB,SAASM,IACFK,MAAMvB,EAAMgB,SAClBZ,MAAK,SAAAoB,GAGf,GAAqB,KAAjBA,EAAOC,OACP,OAAOvB,OAAOC,KAAKjB,GAAYkB,MAAK,SAAAC,GAChCA,EAAMqB,IAAIR,EAAKM,EAAOG,eAK3BJ,MAAMvB,EAAMgB,SAAZ,OAGI,WACH,OAAOC,MAKVC,EAAIN,SAAS,4BAAmD,GAArBM,EAAIN,SAAS,MACzCW,MAAMvB,EAAMgB,SAClBZ,MAAK,SAAAoB,GACf,GAAqB,KAAjBA,EAAOC,OACP,OAAOvB,OAAOC,KAAKf,GAAmBgB,MAAK,SAAAC,GACvCA,EAAMqB,IAAIR,EAAKM,EAAOG,eAI3BJ,MAAMvB,EAAMgB,SAAZ,OACI,WACH,OAAOC,MAKVC,EAAIN,SAAS,aAAqD,GAAtCM,EAAIN,SAAS,uBAC1BW,MAAMvB,EAAMgB,SAClBZ,MAAK,SAAAoB,GACf,GAAqB,KAAjBA,EAAOC,OACP,OAAOvB,OAAOC,KAAKhB,GAAoBiB,MAAK,SAAAC,GACxCA,EAAMqB,IAAIR,EAAKM,EAAOG,eAI3BJ,MAAMvB,EAAMgB,SAAZ,OACI,WACH,OAAOC,MAMRA,GAAiBM,MAAMvB,EAAMgB,YA7D5C,OA+DS,WAGL,GAAiC,YAA7BhB,EAAMgB,QAAQY,YACd,OAAO1B,OAAOa,MAAM,2B","sources":["webpack:///./resources/js/sw.js"],"sourcesContent":["\r\n// names of cache variables\r\n// if any file has been changed from specified\r\n// cache then we should change version of cache name\r\n// in case to delete old cache - only for static caches\r\n\r\n// version of application from .env\r\nlet app_version = process.env.MIX_APP_VERSION;\r\n\r\n// static caches\r\nconst imagesCache = 'images-cache-v' + app_version;\r\nconst cssCache = 'css-cache-v' + app_version;\r\nconst jsCache = 'js-cache-v' + app_version;\r\nconst assetsCache = 'assets-cache-v' + app_version;\r\nconst pluginsCache = 'plugins-cache-v' + app_version;\r\n\r\n// dynamic caches\r\nconst pagesCache = 'pages-cache';\r\nconst usersProfilesCache = 'users-profiles-cache';\r\nconst usersAvatarsCache = 'users-avatars-cache';\r\n\r\n\r\n// all names of cache variables\r\nlet keysOfStaticCaches = [\r\n    imagesCache,\r\n    cssCache,\r\n    jsCache,\r\n    assetsCache,\r\n    pluginsCache\r\n];\r\n\r\nlet keysOfDynamicCaches = [\r\n    pagesCache,\r\n    usersProfilesCache,\r\n    usersAvatarsCache\r\n];\r\n\r\n\r\n// urls to cache\r\nconst imagesToCache = [\r\n    '/favicon.ico',\r\n    '/assets/images/background.jpg',\r\n    '/assets/icons/16x16.png',\r\n    '/assets/icons/32x32.png',\r\n    '/assets/icons/72x72.png',\r\n    '/assets/icons/96x96.png',\r\n    '/assets/icons/144x144.png',\r\n    '/assets/icons/152x152.png',\r\n    '/assets/icons/192x192.png',\r\n    '/assets/icons/384x384.png',\r\n    '/assets/icons/512x512.png',\r\n    '/assets/icons/apple-touch-icon.png',\r\n    '/assets/images/slider_images/image1.png',\r\n    '/assets/images/slider_images/image2.png',\r\n    '/assets/images/slider_images/image3.png',\r\n    '/assets/images/slider_images/image4.png',\r\n    '/assets/images/slider_images/image5.png',\r\n    '/assets/images/slider_images/image6.png',\r\n    '/assets/images/snake_mini_game/board_background_brown.png',\r\n    '/assets/images/snake_mini_game/board_background_green.png',\r\n    '/assets/images/snake_mini_game/board_background_purple.png'\r\n];\r\n\r\nconst cssToCache = [\r\n    '/css/app.css',\r\n    '/css/components/send-message.css',\r\n    '/css/custom/classes.css',\r\n    '/css/custom/layout.css',\r\n    '/css/pages/help.css',\r\n    '/css/pages/options.css',\r\n    '/css/pages/profile.css',\r\n    '/css/pages/welcome.css',\r\n    '/css/snake_mini_game/buttons.css',\r\n    '/css/snake_mini_game/food.css',\r\n    '/css/snake_mini_game/options.css',\r\n    '/css/snake_mini_game/score.css',\r\n    '/css/snake_mini_game/snake-mini-game.css',\r\n    '/css/snake_mini_game/snake.css'\r\n];\r\n\r\nconst jsToCache = [\r\n    '/js/snake_mini_game/food.js',\r\n    '/js/snake_mini_game/game.js',\r\n    '/js/snake_mini_game/grid.js',\r\n    '/js/snake_mini_game/input.js',\r\n    '/js/snake_mini_game/options.js',\r\n    '/js/snake_mini_game/score.js',\r\n    '/js/snake_mini_game/snake.js',\r\n    '/js/app.js'\r\n];\r\n\r\nconst assetsToCache = [\r\n    '/assets/uncensored_words.json'\r\n];\r\n\r\nconst pluginsToCache = [\r\n    '/assets/plugins/Bootstrap/bootstrap.css',\r\n    '/assets/plugins/Bootstrap/bootstrap.css.map',\r\n    '/assets/plugins/Bootstrap/bootstrap.min.js',\r\n    '/assets/plugins/Bootstrap/bootstrap.min.js.map',\r\n    '/assets/plugins/BootstrapIcons/fonts/bootstrap-icons.woff',\r\n    '/assets/plugins/BootstrapIcons/fonts/bootstrap-icons.woff2',\r\n    '/assets/plugins/BootstrapIcons/fonts/bootstrap-icons.woff2?856008caa5eb66df68595e734e59580d',\r\n    '/assets/plugins/BootstrapIcons/bootstrap-icons.css',\r\n    '/assets/plugins/cookieBar/jquery.cookieBar.css',\r\n    '/assets/plugins/cookieBar/jquery.cookieBar.js',\r\n    '/assets/plugins/cookieBar/jquery.cookieBar.min.js',\r\n    '/assets/plugins/DataTables/DataTables-1.10.25/images/sort_both.png',\r\n    '/assets/plugins/DataTables/DataTables-1.10.25/images/sort_asc.png',\r\n    '/assets/plugins/DataTables/datatables.js',\r\n    '/assets/plugins/DataTables/datatables.min.js',\r\n    '/assets/plugins/DataTables/datatables.css',\r\n    '/assets/plugins/DataTables/datatables.min.css',\r\n    '/assets/plugins/DataTables/pl.json',\r\n    '/assets/plugins/dropify/css/demo.css',\r\n    '/assets/plugins/dropify/css/dropify.css',\r\n    '/assets/plugins/dropify/css/dropify.min.css',\r\n    '/assets/plugins/dropify/fonts/dropify.eot',\r\n    '/assets/plugins/dropify/fonts/dropify.svg',\r\n    '/assets/plugins/dropify/fonts/dropify.ttf',\r\n    '/assets/plugins/dropify/fonts/dropify.woff',\r\n    '/assets/plugins/dropify/js/dropify.js',\r\n    '/assets/plugins/dropify/js/dropify.min.js',\r\n    '/assets/plugins/jQuery/jquery-3.6.0.min.js',\r\n    '/assets/plugins/jQueryBlockUI/jquery.blockUI.js',\r\n    '/assets/plugins/js-cookie/js.cookie.js',\r\n    '/assets/plugins/js-cookie/js.cookie.min.js',\r\n    '/assets/plugins/js-cookie/js.cookie.min.mjs',\r\n    '/assets/plugins/js-cookie/js.cookie.mjs',\r\n    '/assets/plugins/toastr/toastr.css',\r\n    '/assets/plugins/toastr/toastr.min.css',\r\n    '/assets/plugins/toastr/toastr.js.map',\r\n    '/assets/plugins/toastr/toastr.min.js'\r\n\r\n];\r\n\r\nconst pagesToCache = [\r\n    '/',\r\n    '/gra',\r\n    '/strona-offline',\r\n    '/pobierz-gre',\r\n    '/pomoc',\r\n    '/ranking',\r\n    '/ranking/punkty',\r\n    '/ranking/monety',\r\n    '/ranking/easy',\r\n    '/ranking/medium',\r\n    '/ranking/hard',\r\n    '/ranking/speed'\r\n];\r\n\r\nconst usersAvatarsToCache = [\r\n    '/assets/images/avatar.png'\r\n];\r\n\r\n\r\n// install event - only once\r\nself.addEventListener('install', (event) => {\r\n    // caching everything\r\n    event.waitUntil(\r\n        caches.open(imagesCache).then(cache => {cache.addAll(imagesToCache)}),\r\n        caches.open(cssCache).then(cache => {cache.addAll(cssToCache);}),\r\n        caches.open(jsCache).then(cache => {cache.addAll(jsToCache);}),\r\n        caches.open(assetsCache).then(cache => {cache.addAll(assetsToCache);}),\r\n        caches.open(pluginsCache).then(cache => {cache.addAll(pluginsToCache);}),\r\n        caches.open(usersAvatarsCache).then(cache => {cache.addAll(usersAvatarsToCache);}),\r\n        caches.open(pagesCache).then(cache => {cache.addAll(pagesToCache);})\r\n    );\r\n});\r\n\r\n\r\n// activate event\r\nself.addEventListener('activate', (event) => {\r\n    // removing old versions of cache\r\n    // if array of cache keys doesnt contain specified key\r\n    // then removing it from cache storage\r\n    event.waitUntil(\r\n        caches.keys().then(keys => {\r\n            return Promise.all(keys\r\n                // delete cache when cache's name is NOT in static caches and NOT in dynamics caches\r\n                .filter(key => keysOfStaticCaches.includes(key) == false && keysOfDynamicCaches.includes(key) == false)\r\n                .map(key => caches.delete(key))\r\n            )\r\n        })\r\n    )\r\n});\r\n\r\n\r\n// fetch event\r\nself.addEventListener('fetch', (event) => {\r\n    // getting cached assets\r\n    event.respondWith(\r\n        caches.match(event.request).then(cacheResponse => {\r\n            // self.registration.scope is for example --> http://127.0.0.1:8000/login\r\n            // so URL will be '/login'\r\n            let pathname = event.request.url.split(self.registration.scope);\r\n            let URL = '/'+pathname[1];\r\n\r\n            // checking if URL matches pagesToCache\r\n            if (pagesToCache.includes(URL)) {\r\n                let fetchResponse = fetch(event.request);\r\n                fetchResponse.then(result => {\r\n                    // if there is a internet connection\r\n                    // so we can clone data and replace it with old one\r\n                    if (result.status == 200) {\r\n                        return caches.open(pagesCache).then(cache => {\r\n                            cache.put(URL, result.clone());\r\n                        })\r\n                    }\r\n                });\r\n                // returning new fetched data when there is a internet connenction\r\n                return fetch(event.request)\r\n                    // if there was a problem, for example no internet connection\r\n                    // returning data from old cache\r\n                    .catch(() => {\r\n                        return cacheResponse;\r\n                    });\r\n            }\r\n\r\n            // if requested thing is user's avatar image\r\n            else if (URL.includes('/storage/users_avatars/') && URL.includes('?') == false) {\r\n                let fetchResponse = fetch(event.request);\r\n                fetchResponse.then(result => {\r\n                    if (result.status == 200) {\r\n                        return caches.open(usersAvatarsCache).then(cache => {\r\n                            cache.put(URL, result.clone());\r\n                        })\r\n                    }\r\n                });\r\n                return fetch(event.request)\r\n                    .catch(() => {\r\n                        return cacheResponse;\r\n                    })\r\n            }\r\n\r\n            // if requested thing is user's profile page\r\n            else if (URL.includes('/profil/') && URL.includes('/profil/ustawienia') == false) {\r\n                let fetchResponse = fetch(event.request);\r\n                fetchResponse.then(result => {\r\n                    if (result.status == 200) {\r\n                        return caches.open(usersProfilesCache).then(cache => {\r\n                            cache.put(URL, result.clone());\r\n                        })\r\n                    }\r\n                });\r\n                return fetch(event.request)\r\n                    .catch(() => {\r\n                        return cacheResponse;\r\n                    })\r\n            }\r\n\r\n            // if requested thing is static\r\n            else {\r\n                return cacheResponse || fetch(event.request);\r\n            }\r\n        }).catch(() => {\r\n            // there is no internet connection and requested thing isn't cached\r\n            // if requested thing is subpage and it isn't cached - show offline fallback\r\n            if (event.request.destination == 'document') {\r\n                return caches.match('/strona-offline');\r\n            }\r\n\r\n        })\r\n    );\r\n});\r\n\r\n"],"names":["imagesCache","cssCache","jsCache","assetsCache","pluginsCache","pagesCache","usersProfilesCache","usersAvatarsCache","keysOfStaticCaches","keysOfDynamicCaches","imagesToCache","cssToCache","jsToCache","assetsToCache","pluginsToCache","pagesToCache","usersAvatarsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","keys","Promise","all","filter","key","includes","map","respondWith","match","request","cacheResponse","URL","url","split","registration","scope","fetch","result","status","put","clone","destination"],"sourceRoot":""}